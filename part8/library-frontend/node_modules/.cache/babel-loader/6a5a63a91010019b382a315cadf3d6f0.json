{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ryanw\\\\github\\\\fullstackopen2019\\\\part8\\\\library-frontend\\\\src\\\\components\\\\Books.js\";\nimport React, { useState } from 'react';\nimport { ALL_BOOKS } from '../queries';\nimport { useQuery } from '@apollo/client';\n\nconst Books = props => {\n  const res = useQuery(ALL_BOOKS);\n  const [filter, setFilter] = useState('all genres');\n\n  if (res.loading) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, \"loading...\");\n  }\n\n  const books = res.data.allBooks;\n\n  if (!props.show) {\n    return null;\n  }\n\n  let genres = ['all genres'];\n\n  for (let book of books) {\n    for (let genre of book.genres) {\n      if (!genres.includes(genre)) genres = genres.concat(genre);\n    }\n  }\n\n  const bookRow = book => React.createElement(\"tr\", {\n    key: book.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, book.title), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, book.author.name), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, book.published));\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"books\"), React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"author\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"published\")), books.map(book => book.genres.includes(filter) || filter === 'all genres' ? bookRow(book) : null))), genres.map(genre => React.createElement(\"button\", {\n    key: genre,\n    onClick: () => setFilter(genre),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, genre)));\n};\n\nexport default Books;","map":{"version":3,"sources":["C:/Users/ryanw/github/fullstackopen2019/part8/library-frontend/src/components/Books.js"],"names":["React","useState","ALL_BOOKS","useQuery","Books","props","res","filter","setFilter","loading","books","data","allBooks","show","genres","book","genre","includes","concat","bookRow","title","author","name","published","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,QAAT,QAAyB,gBAAzB;;AACA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACvB,QAAMC,GAAG,GAAGH,QAAQ,CAACD,SAAD,CAApB;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,YAAD,CAApC;;AACA,MAAGK,GAAG,CAACG,OAAP,EAAgB;AACd,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF;AAGD;;AACD,QAAMC,KAAK,GAAGJ,GAAG,CAACK,IAAJ,CAASC,QAAvB;;AACA,MAAI,CAACP,KAAK,CAACQ,IAAX,EAAiB;AACf,WAAO,IAAP;AACD;;AACD,MAAIC,MAAM,GAAG,CAAC,YAAD,CAAb;;AACA,OAAM,IAAIC,IAAV,IAAkBL,KAAlB,EAA0B;AACxB,SAAM,IAAIM,KAAV,IAAmBD,IAAI,CAACD,MAAxB,EAAiC;AAC/B,UAAG,CAACA,MAAM,CAACG,QAAP,CAAgBD,KAAhB,CAAJ,EACEF,MAAM,GAAGA,MAAM,CAACI,MAAP,CAAcF,KAAd,CAAT;AACH;AACF;;AAED,QAAMG,OAAO,GAAIJ,IAAD,IACd;AAAI,IAAA,GAAG,EAAEA,IAAI,CAACK,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKL,IAAI,CAACK,KAAV,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKL,IAAI,CAACM,MAAL,CAAYC,IAAjB,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKP,IAAI,CAACQ,SAAV,CAHF,CADF;;AAQA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBALF,CADF,EAUGb,KAAK,CAACc,GAAN,CAAUT,IAAI,IACbA,IAAI,CAACD,MAAL,CAAYG,QAAZ,CAAqBV,MAArB,KAAgCA,MAAM,KAAK,YAA3C,GAA0DY,OAAO,CAACJ,IAAD,CAAjE,GAA0E,IAD3E,CAVH,CADF,CAHF,EAmBGD,MAAM,CAACU,GAAP,CAAWR,KAAK,IACf;AAAQ,IAAA,GAAG,EAAEA,KAAb;AAAoB,IAAA,OAAO,EAAE,MAAIR,SAAS,CAACQ,KAAD,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoDA,KAApD,CADD,CAnBH,CADF;AAyBD,CArDD;;AAuDA,eAAeZ,KAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport { ALL_BOOKS } from '../queries'\r\nimport { useQuery } from '@apollo/client'\r\nconst Books = (props) => {\r\n  const res = useQuery(ALL_BOOKS)\r\n  const [filter, setFilter] = useState('all genres')\r\n  if(res.loading) {\r\n    return (\r\n      <div>loading...</div>\r\n    )\r\n  }\r\n  const books = res.data.allBooks\r\n  if (!props.show) {\r\n    return null\r\n  }\r\n  let genres = ['all genres']\r\n  for ( let book of books ) {\r\n    for ( let genre of book.genres ) {\r\n      if(!genres.includes(genre))\r\n        genres = genres.concat(genre)\r\n    }\r\n  }\r\n\r\n  const bookRow = (book) => (\r\n    <tr key={book.title}>\r\n      <td>{book.title}</td>\r\n      <td>{book.author.name}</td>\r\n      <td>{book.published}</td>\r\n    </tr>\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <h2>books</h2>\r\n\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <th></th>\r\n            <th>\r\n              author\r\n            </th>\r\n            <th>\r\n              published\r\n            </th>\r\n          </tr>\r\n          {books.map(book =>\r\n            book.genres.includes(filter) || filter === 'all genres' ? bookRow(book) : null\r\n          )}\r\n        </tbody>\r\n      </table>\r\n      {genres.map(genre =>\r\n        <button key={genre} onClick={()=>setFilter(genre)}>{genre}</button>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Books\r\n"]},"metadata":{},"sourceType":"module"}