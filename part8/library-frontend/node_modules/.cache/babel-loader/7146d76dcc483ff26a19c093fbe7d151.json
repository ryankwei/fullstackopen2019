{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ryanw\\\\github\\\\fullstackopen2019\\\\part8\\\\library-frontend\\\\src\\\\components\\\\Recommend.js\";\nimport React, { useState, useEffect } from 'react';\nimport { ALL_BOOKS, ME } from '../queries';\nimport { useLazyQuery, useQuery } from '@apollo/client';\n\nconst Recommend = props => {\n  const [getBooks, result] = useLazyQuery(ALL_BOOKS);\n  const [books, setBooks] = useState([]);\n  const userRes = useQuery(ME);\n  useEffect(() => {\n    console.log(userRes);\n\n    if (!userRes.loading) {\n      getBooks({\n        variables: {\n          genre: userRes.data.me.favoriteGenre\n        }\n      });\n    }\n  }, [userRes]);\n  useEffect(() => {\n    console.log(result);\n\n    if (result.called && result.networkStatus > 6 && result.data && result.data.allBooks) {\n      setBooks(result.data.allBooks);\n    }\n  }, [result]);\n  useEffect(() => {\n    console.log(\"This is books\", books);\n  }, [books]);\n\n  if (userRes.loading) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \"loading...\");\n  }\n\n  if (!props.show) {\n    return null;\n  }\n\n  const bookRow = book => React.createElement(\"tr\", {\n    key: book.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, book.title), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, book.author.name), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, book.published));\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"books\"), \"books in your favorite genre \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, userRes.data.me.favoriteGenre), React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"author\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"published\")), books.map(book => bookRow(book)))));\n};\n\nexport default Recommend;","map":{"version":3,"sources":["C:/Users/ryanw/github/fullstackopen2019/part8/library-frontend/src/components/Recommend.js"],"names":["React","useState","useEffect","ALL_BOOKS","ME","useLazyQuery","useQuery","Recommend","props","getBooks","result","books","setBooks","userRes","console","log","loading","variables","genre","data","me","favoriteGenre","called","networkStatus","allBooks","show","bookRow","book","title","author","name","published","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,EAApB,QAA8B,YAA9B;AACA,SAASC,YAAT,EAAuBC,QAAvB,QAAuC,gBAAvC;;AACA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAC3B,QAAM,CAACC,QAAD,EAAWC,MAAX,IAAqBL,YAAY,CAACF,SAAD,CAAvC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMY,OAAO,GAAGP,QAAQ,CAACF,EAAD,CAAxB;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;;AACA,QAAG,CAACA,OAAO,CAACG,OAAZ,EAAqB;AACnBP,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,SAAS,EAAE;AAAEC,UAAAA,KAAK,EAAEL,OAAO,CAACM,IAAR,CAAaC,EAAb,CAAgBC;AAAzB;AAAb,OAAD,CAAR;AACD;AACF,GALQ,EAKN,CAACR,OAAD,CALM,CAAT;AAOAX,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;;AACA,QAAGA,MAAM,CAACY,MAAP,IAAiBZ,MAAM,CAACa,aAAP,GAAuB,CAAxC,IAA6Cb,MAAM,CAACS,IAApD,IAA4DT,MAAM,CAACS,IAAP,CAAYK,QAA3E,EAAqF;AACnFZ,MAAAA,QAAQ,CAACF,MAAM,CAACS,IAAP,CAAYK,QAAb,CAAR;AACD;AACF,GALQ,EAKN,CAACd,MAAD,CALM,CAAT;AAOAR,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BJ,KAA7B;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;;AAIA,MAAIE,OAAO,CAACG,OAAZ,EAAsB;AACpB,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF;AAGD;;AAED,MAAI,CAACR,KAAK,CAACiB,IAAX,EAAiB;AACf,WAAO,IAAP;AACD;;AAED,QAAMC,OAAO,GAAIC,IAAD,IACd;AAAI,IAAA,GAAG,EAAEA,IAAI,CAACC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,IAAI,CAACC,KAAV,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,IAAI,CAACE,MAAL,CAAYC,IAAjB,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKH,IAAI,CAACI,SAAV,CAHF,CADF;;AAQA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,mCAE+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIlB,OAAO,CAACM,IAAR,CAAaC,EAAb,CAAgBC,aAApB,CAF/B,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBALF,CADF,EAUGV,KAAK,CAACqB,GAAN,CAAUL,IAAI,IACbD,OAAO,CAACC,IAAD,CADR,CAVH,CADF,CAHF,CADF;AAsBD,CA/DD;;AAiEA,eAAepB,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { ALL_BOOKS, ME } from '../queries'\r\nimport { useLazyQuery, useQuery } from '@apollo/client'\r\nconst Recommend = (props) => {\r\n  const [getBooks, result] = useLazyQuery(ALL_BOOKS)\r\n  const [books, setBooks] = useState([])\r\n  const userRes = useQuery(ME)\r\n\r\n  useEffect(() => {\r\n    console.log(userRes)\r\n    if(!userRes.loading) {\r\n      getBooks({ variables: { genre: userRes.data.me.favoriteGenre }})\r\n    }\r\n  }, [userRes])\r\n\r\n  useEffect(() => {\r\n    console.log(result)\r\n    if(result.called && result.networkStatus > 6 && result.data && result.data.allBooks) {\r\n      setBooks(result.data.allBooks)\r\n    }\r\n  }, [result])\r\n\r\n  useEffect(() => {\r\n    console.log(\"This is books\", books)\r\n  }, [books])\r\n\r\n  if( userRes.loading ) {\r\n    return (\r\n      <div>loading...</div>\r\n    )\r\n  }\r\n\r\n  if (!props.show) {\r\n    return null\r\n  }\r\n\r\n  const bookRow = (book) => (\r\n    <tr key={book.title}>\r\n      <td>{book.title}</td>\r\n      <td>{book.author.name}</td>\r\n      <td>{book.published}</td>\r\n    </tr>\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <h2>books</h2>\r\n      books in your favorite genre <b>{userRes.data.me.favoriteGenre}</b>\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <th></th>\r\n            <th>\r\n              author\r\n            </th>\r\n            <th>\r\n              published\r\n            </th>\r\n          </tr>\r\n          {books.map(book =>\r\n            bookRow(book)\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Recommend\r\n"]},"metadata":{},"sourceType":"module"}