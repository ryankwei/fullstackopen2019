{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ryanw\\\\github\\\\fullstackopen2019\\\\part8\\\\library-frontend\\\\src\\\\components\\\\Books.js\";\nimport React, { useState, useEffect } from 'react';\nimport { ALL_BOOKS } from '../queries';\nimport { useQuery, useLazyQuery } from '@apollo/client';\n\nconst Books = props => {\n  const res = useQuery(ALL_BOOKS);\n  const [getBooks, result] = useLazyQuery(ALL_BOOKS);\n  const [books, setBooks] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState('all genres');\n  useEffect(() => {\n    if (result.data) {\n      setBooks(result.data.allBooks);\n    } else {\n      setBooks(res.data.allBooks);\n    }\n  }, [result]);\n\n  if (res.loading) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, \"loading...\");\n  }\n\n  let genres = ['all genres'];\n\n  for (let book of res.data.allBooks) {\n    for (let genre of book.genres) {\n      if (!genres.includes(genre)) genres = genres.concat(genre);\n    }\n  }\n\n  const setFilter = genre => {\n    if (genre !== 'all genres') {\n      getBooks({\n        variables: {\n          genre: genre\n        }\n      });\n      setSelectedGenre(genre);\n    } else {\n      setBooks(res.data.allBooks);\n    }\n  };\n\n  if (!props.show) {\n    return null;\n  }\n\n  const bookRow = book => React.createElement(\"tr\", {\n    key: book.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, book.title), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, book.author.name), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, book.published));\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"books\"), \"in genre \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, selectedGenre), React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"author\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"published\")), books.map(book => bookRow(book)))), genres.map(genre => React.createElement(\"button\", {\n    key: genre,\n    onClick: () => setFilter(genre),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, genre)));\n};\n\nexport default Books;","map":{"version":3,"sources":["C:/Users/ryanw/github/fullstackopen2019/part8/library-frontend/src/components/Books.js"],"names":["React","useState","useEffect","ALL_BOOKS","useQuery","useLazyQuery","Books","props","res","getBooks","result","books","setBooks","selectedGenre","setSelectedGenre","data","allBooks","loading","genres","book","genre","includes","concat","setFilter","variables","show","bookRow","title","author","name","published","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { ALL_BOOKS } from '../queries'\r\nimport { useQuery, useLazyQuery } from '@apollo/client'\r\nconst Books = (props) => {\r\n  const res = useQuery(ALL_BOOKS)\r\n  const [getBooks, result] = useLazyQuery(ALL_BOOKS)\r\n  const [books, setBooks] = useState([])\r\n  const [selectedGenre, setSelectedGenre] = useState('all genres')\r\n\r\n  useEffect(() => {\r\n    if (result.data) {\r\n      setBooks(result.data.allBooks)\r\n    }\r\n    else {\r\n      setBooks(res.data.allBooks)\r\n    }\r\n  }, [result])\r\n  if(res.loading) {\r\n    return (\r\n      <div>loading...</div>\r\n    )\r\n  }\r\n\r\n  let genres = ['all genres']\r\n  for ( let book of res.data.allBooks ) {\r\n    for ( let genre of book.genres ) {\r\n      if(!genres.includes(genre))\r\n        genres = genres.concat(genre)\r\n    }\r\n  }\r\n  const setFilter = (genre) => {\r\n    if(genre !== 'all genres') {\r\n      getBooks({ variables: { genre: genre }})\r\n      setSelectedGenre(genre)\r\n    }\r\n    else {\r\n      setBooks(res.data.allBooks)\r\n    }\r\n  }\r\n\r\n  if (!props.show) {\r\n    return null\r\n  }\r\n\r\n\r\n  const bookRow = (book) => (\r\n    <tr key={book.title}>\r\n      <td>{book.title}</td>\r\n      <td>{book.author.name}</td>\r\n      <td>{book.published}</td>\r\n    </tr>\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <h2>books</h2>\r\n      in genre <b>{selectedGenre}</b>\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <th></th>\r\n            <th>\r\n              author\r\n            </th>\r\n            <th>\r\n              published\r\n            </th>\r\n          </tr>\r\n          {books.map(book =>\r\n            bookRow(book)\r\n          )}\r\n        </tbody>\r\n      </table>\r\n      {genres.map(genre =>\r\n        <button key={genre} onClick={()=>setFilter(genre)}>{genre}</button>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Books\r\n"]},"metadata":{},"sourceType":"module"}