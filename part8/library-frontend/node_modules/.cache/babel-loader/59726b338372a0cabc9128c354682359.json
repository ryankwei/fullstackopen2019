{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ryanw\\\\github\\\\fullstackopen2019\\\\part8\\\\library-frontend\\\\src\\\\components\\\\Authors.js\";\nimport { UPDATE_BORN, ALL_AUTHORS } from '../queries';\nimport React, { useState } from 'react';\nimport { useMutation, useQuery } from '@apollo/client';\n\nconst Authors = props => {\n  const [name, setName] = useState('');\n  const [born, setBorn] = useState('');\n  const [updateBorn, result] = useMutation(UPDATE_BORN, {\n    refetchQueries: [{\n      query: ALL_AUTHORS\n    }]\n  });\n\n  const newBorn = async event => {\n    event.preventDefault();\n    updateBorn({\n      variables: {\n        name: name,\n        born: parseInt(born)\n      }\n    });\n    console.log(result);\n    setName('');\n    setBorn('');\n  };\n\n  const res = useQuery(ALL_AUTHORS);\n\n  if (res.loading) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"loading...\");\n  }\n\n  const authors = res.data.allAuthors;\n\n  if (!props.show) {\n    return null;\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"authors\"), React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"born\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"books\")), authors.map(a => React.createElement(\"tr\", {\n    key: a.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, a.name), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, a.born), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, a.bookCount))))), React.createElement(\"form\", {\n    onSubmit: newBorn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"name\", React.createElement(\"input\", {\n    value: name,\n    onChange: ({\n      target\n    }) => setName(target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"born\", React.createElement(\"input\", {\n    value: born,\n    onChange: ({\n      target\n    }) => setBorn(target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    type: \"submit\",\n    onSubmit: newBorn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"update author\")));\n};\n\nexport default Authors;","map":{"version":3,"sources":["C:/Users/ryanw/github/fullstackopen2019/part8/library-frontend/src/components/Authors.js"],"names":["UPDATE_BORN","ALL_AUTHORS","React","useState","useMutation","useQuery","Authors","props","name","setName","born","setBorn","updateBorn","result","refetchQueries","query","newBorn","event","preventDefault","variables","parseInt","console","log","res","loading","authors","data","allAuthors","show","map","a","bookCount","target","value"],"mappings":"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","sourcesContent":["import { UPDATE_BORN, ALL_AUTHORS } from '../queries'\r\nimport React, { useState } from 'react'\r\nimport { useMutation, useQuery } from '@apollo/client'\r\nconst Authors = (props) => {\r\n  const [name, setName] = useState('')\r\n  const [born, setBorn] = useState('')\r\n  const [ updateBorn, result ] = useMutation(UPDATE_BORN,  {\r\n    refetchQueries: [ { query: ALL_AUTHORS }]\r\n  })\r\n\r\n  const newBorn = async (event) => {\r\n    event.preventDefault()\r\n\r\n    updateBorn({\r\n      variables: { name: name, born: parseInt(born) }\r\n    })\r\n    console.log(result)\r\n    setName('')\r\n    setBorn('')\r\n  }\r\n\r\n  const res = useQuery(ALL_AUTHORS)\r\n  if(res.loading) {\r\n    return (\r\n      <div>loading...</div>\r\n    )\r\n  }\r\n  const authors = res.data.allAuthors\r\n\r\n  if (!props.show) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>authors</h2>\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <th></th>\r\n            <th>\r\n              born\r\n            </th>\r\n            <th>\r\n              books\r\n            </th>\r\n          </tr>\r\n          {authors.map(a =>\r\n            <tr key={a.name}>\r\n              <td>{a.name}</td>\r\n              <td>{a.born}</td>\r\n              <td>{a.bookCount}</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n      <form onSubmit={newBorn}>\r\n        <div>\r\n          name\r\n          <input\r\n            value={name}\r\n            onChange={({ target }) => setName(target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          born\r\n          <input\r\n            value={born}\r\n            onChange={({ target }) => setBorn(target.value)}\r\n          />\r\n        </div>\r\n        <button type=\"submit\" onSubmit={newBorn}>update author</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Authors\r\n"]},"metadata":{},"sourceType":"module"}