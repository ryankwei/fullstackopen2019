{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ryanw\\\\github\\\\fullstackopen2019\\\\part8\\\\library-frontend\\\\src\\\\components\\\\Recommend.js\";\nimport React from 'react';\nimport { ALL_BOOKS, ME } from '../queries';\nimport { useQuery } from '@apollo/client';\n\nconst Recommend = props => {\n  const res = useQuery(ALL_BOOKS);\n  const userRes = useQuery(ME);\n\n  if (res.loading || userRes.loading) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, \"loading...\");\n  }\n\n  const filter = userRes.data.favoriteGenre;\n  const books = res.data.allBooks;\n\n  if (!props.show) {\n    return null;\n  }\n\n  const bookRow = book => React.createElement(\"tr\", {\n    key: book.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, book.title), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, book.author.name), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, book.published));\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"books\"), \"books in your favorite genre \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, filter), React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"author\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"published\")), books.map(book => book.genres.includes(filter) ? bookRow(book) : null))));\n};\n\nexport default Recommend;","map":{"version":3,"sources":["C:/Users/ryanw/github/fullstackopen2019/part8/library-frontend/src/components/Recommend.js"],"names":["React","ALL_BOOKS","ME","useQuery","Recommend","props","res","userRes","loading","filter","data","favoriteGenre","books","allBooks","show","bookRow","book","title","author","name","published","map","genres","includes"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,EAApB,QAA8B,YAA9B;AACA,SAASC,QAAT,QAAyB,gBAAzB;;AACA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAC3B,QAAMC,GAAG,GAAGH,QAAQ,CAACF,SAAD,CAApB;AACA,QAAMM,OAAO,GAAGJ,QAAQ,CAACD,EAAD,CAAxB;;AACA,MAAGI,GAAG,CAACE,OAAJ,IAAeD,OAAO,CAACC,OAA1B,EAAmC;AACjC,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF;AAGD;;AACD,QAAMC,MAAM,GAAGF,OAAO,CAACG,IAAR,CAAaC,aAA5B;AACA,QAAMC,KAAK,GAAGN,GAAG,CAACI,IAAJ,CAASG,QAAvB;;AACA,MAAI,CAACR,KAAK,CAACS,IAAX,EAAiB;AACf,WAAO,IAAP;AACD;;AAED,QAAMC,OAAO,GAAIC,IAAD,IACd;AAAI,IAAA,GAAG,EAAEA,IAAI,CAACC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,IAAI,CAACC,KAAV,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,IAAI,CAACE,MAAL,CAAYC,IAAjB,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKH,IAAI,CAACI,SAAV,CAHF,CADF;;AAQA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,mCAE+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIX,MAAJ,CAF/B,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBALF,CADF,EAUGG,KAAK,CAACS,GAAN,CAAUL,IAAI,IACbA,IAAI,CAACM,MAAL,CAAYC,QAAZ,CAAqBd,MAArB,IAA+BM,OAAO,CAACC,IAAD,CAAtC,GAA+C,IADhD,CAVH,CADF,CAHF,CADF;AAsBD,CA5CD;;AA8CA,eAAeZ,SAAf","sourcesContent":["import React from 'react'\r\nimport { ALL_BOOKS, ME } from '../queries'\r\nimport { useQuery } from '@apollo/client'\r\nconst Recommend = (props) => {\r\n  const res = useQuery(ALL_BOOKS)\r\n  const userRes = useQuery(ME)\r\n  if(res.loading || userRes.loading) {\r\n    return (\r\n      <div>loading...</div>\r\n    )\r\n  }\r\n  const filter = userRes.data.favoriteGenre\r\n  const books = res.data.allBooks\r\n  if (!props.show) {\r\n    return null\r\n  }\r\n\r\n  const bookRow = (book) => (\r\n    <tr key={book.title}>\r\n      <td>{book.title}</td>\r\n      <td>{book.author.name}</td>\r\n      <td>{book.published}</td>\r\n    </tr>\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <h2>books</h2>\r\n      books in your favorite genre <b>{filter}</b>\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <th></th>\r\n            <th>\r\n              author\r\n            </th>\r\n            <th>\r\n              published\r\n            </th>\r\n          </tr>\r\n          {books.map(book =>\r\n            book.genres.includes(filter) ? bookRow(book) : null\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Recommend\r\n"]},"metadata":{},"sourceType":"module"}