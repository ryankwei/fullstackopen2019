{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ryanw\\\\github\\\\fullstackopen2019\\\\part8\\\\library-frontend\\\\src\\\\components\\\\Books.js\";\nimport React, { useState, useEffect } from 'react';\nimport { ALL_BOOKS } from '../queries';\nimport { useQuery, useLazyQuery } from '@apollo/client';\n\nconst Books = props => {\n  //  const res = useQuery(ALL_BOOKS)\n  const [getBooks, result] = useLazyQuery(ALL_BOOKS);\n  const [books, setBooks] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState('all genres');\n  const [genresList, setGenresList] = useState([]);\n  useEffect(() => {\n    const genre = selectedGenre === 'all genres' ? null : selectedGenre;\n    getBooks({\n      variables: {\n        genre: genre\n      }\n    });\n  }, [selectedGenre, getBooks]);\n  useEffect(() => {\n    console.log(result);\n\n    if (selectedGenre === 'all genres') {\n      let genres = ['all genres'];\n\n      for (let book of books) {\n        for (let genre of book.genres) {\n          if (!genres.includes(genre)) genres = genres.concat(genre);\n        }\n      }\n\n      setGenresList(genres);\n    }\n  }, [result]);\n\n  if (!props.show) {\n    return null;\n  }\n\n  const bookRow = book => React.createElement(\"tr\", {\n    key: book.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, book.title), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, book.author.name), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, book.published));\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"books\"), \"in genre \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, selectedGenre), React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"author\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"published\")), books.map(book => bookRow(book)))), genresList.map(genre => React.createElement(\"button\", {\n    key: genre,\n    onClick: () => setSelectedGenre(genre),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, genre)));\n};\n\nexport default Books;","map":{"version":3,"sources":["C:/Users/ryanw/github/fullstackopen2019/part8/library-frontend/src/components/Books.js"],"names":["React","useState","useEffect","ALL_BOOKS","useQuery","useLazyQuery","Books","props","getBooks","result","books","setBooks","selectedGenre","setSelectedGenre","genresList","setGenresList","genre","variables","console","log","genres","book","includes","concat","show","bookRow","title","author","name","published","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,gBAAvC;;AACA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACzB;AACE,QAAM,CAACC,QAAD,EAAWC,MAAX,IAAqBJ,YAAY,CAACF,SAAD,CAAvC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACW,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,CAAC,YAAD,CAAlD;AACA,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,EAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAK;AACb,UAAMc,KAAK,GAAGJ,aAAa,KAAK,YAAlB,GAAiC,IAAjC,GAAwCA,aAAtD;AACAJ,IAAAA,QAAQ,CAAC;AAAES,MAAAA,SAAS,EAAE;AAAED,QAAAA,KAAK,EAAEA;AAAT;AAAb,KAAD,CAAR;AACD,GAHQ,EAGN,CAACJ,aAAD,EAAgBJ,QAAhB,CAHM,CAAT;AAKAN,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ;;AACA,QAAGG,aAAa,KAAK,YAArB,EAAmC;AACjC,UAAIQ,MAAM,GAAG,CAAC,YAAD,CAAb;;AACA,WAAM,IAAIC,IAAV,IAAkBX,KAAlB,EAA0B;AACxB,aAAM,IAAIM,KAAV,IAAmBK,IAAI,CAACD,MAAxB,EAAiC;AAC/B,cAAG,CAACA,MAAM,CAACE,QAAP,CAAgBN,KAAhB,CAAJ,EACEI,MAAM,GAAGA,MAAM,CAACG,MAAP,CAAcP,KAAd,CAAT;AACH;AACF;;AACDD,MAAAA,aAAa,CAACK,MAAD,CAAb;AACD;AACF,GAZQ,EAYN,CAACX,MAAD,CAZM,CAAT;;AAcA,MAAI,CAACF,KAAK,CAACiB,IAAX,EAAiB;AACf,WAAO,IAAP;AACD;;AAED,QAAMC,OAAO,GAAIJ,IAAD,IACd;AAAI,IAAA,GAAG,EAAEA,IAAI,CAACK,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKL,IAAI,CAACK,KAAV,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKL,IAAI,CAACM,MAAL,CAAYC,IAAjB,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKP,IAAI,CAACQ,SAAV,CAHF,CADF;;AAQA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAEW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIjB,aAAJ,CAFX,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBALF,CADF,EAUGF,KAAK,CAACoB,GAAN,CAAUT,IAAI,IACbI,OAAO,CAACJ,IAAD,CADR,CAVH,CADF,CAHF,EAmBGP,UAAU,CAACgB,GAAX,CAAed,KAAK,IACnB;AAAQ,IAAA,GAAG,EAAEA,KAAb;AAAoB,IAAA,OAAO,EAAE,MAAIH,gBAAgB,CAACG,KAAD,CAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2DA,KAA3D,CADD,CAnBH,CADF;AAyBD,CA/DD;;AAiEA,eAAeV,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { ALL_BOOKS } from '../queries'\r\nimport { useQuery, useLazyQuery } from '@apollo/client'\r\nconst Books = (props) => {\r\n//  const res = useQuery(ALL_BOOKS)\r\n  const [getBooks, result] = useLazyQuery(ALL_BOOKS)\r\n  const [books, setBooks] = useState([])\r\n  const [selectedGenre, setSelectedGenre] = useState('all genres')\r\n  const [genresList, setGenresList] = useState([])\r\n\r\n  useEffect(()=> {\r\n    const genre = selectedGenre === 'all genres' ? null : selectedGenre\r\n    getBooks({ variables: { genre: genre }})\r\n  }, [selectedGenre, getBooks])\r\n\r\n  useEffect(() => {\r\n    console.log(result)\r\n    if(selectedGenre === 'all genres') {\r\n      let genres = ['all genres']\r\n      for ( let book of books ) {\r\n        for ( let genre of book.genres ) {\r\n          if(!genres.includes(genre))\r\n            genres = genres.concat(genre)\r\n        }\r\n      }\r\n      setGenresList(genres)\r\n    }\r\n  }, [result])\r\n\r\n  if (!props.show) {\r\n    return null\r\n  }\r\n\r\n  const bookRow = (book) => (\r\n    <tr key={book.title}>\r\n      <td>{book.title}</td>\r\n      <td>{book.author.name}</td>\r\n      <td>{book.published}</td>\r\n    </tr>\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <h2>books</h2>\r\n      in genre <b>{selectedGenre}</b>\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <th></th>\r\n            <th>\r\n              author\r\n            </th>\r\n            <th>\r\n              published\r\n            </th>\r\n          </tr>\r\n          {books.map(book =>\r\n            bookRow(book)\r\n          )}\r\n        </tbody>\r\n      </table>\r\n      {genresList.map(genre =>\r\n        <button key={genre} onClick={()=>setSelectedGenre(genre)}>{genre}</button>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Books\r\n"]},"metadata":{},"sourceType":"module"}